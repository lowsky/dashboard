version: 2
workflows:
  version: 2
  build-and-deploy:
    jobs:
      - buildprep
      - analyse:
          requires:
            - buildprep
      - tests:
          requires:
            - buildprep
      - docker-build
      - build:
          requires:
            - docker-build
            - analyse
            - tests
jobs:
  build:
    docker:
      - image: circleci/node:8@sha256:cf1411f92b98954a78aae92f718030f4ba2aadd4fb09f9f0aea1d775c30937af
    steps:
      - setup_remote_docker
      - run:
          name: message
          command: "echo Overall target built."
  buildprep:
    docker:
      - image: circleci/node:8@sha256:cf1411f92b98954a78aae92f718030f4ba2aadd4fb09f9f0aea1d775c30937af
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: status message
          command: "echo building ... dashboard:$CIRCLE_SHA1 ."
      - run:
          name: env
          command: env
      - restore_cache:
          key: dependency-cache-{{ checksum "yarn.lock" }}
      - run:
          name: yarn install
          command: "yarn install"
      - save_cache:
          key: dependency-cache-{{ checksum "yarn.lock" }}
          paths:
            - ./node_modules
  tests:
    docker:
      - image: circleci/node:8@sha256:cf1411f92b98954a78aae92f718030f4ba2aadd4fb09f9f0aea1d775c30937af
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: status message
          command: "echo analysing... dashboard:$CIRCLE_SHA1 ."
      - run:
          name: env
          command: env
      - restore_cache:
          key: dependency-cache-{{ checksum "yarn.lock" }}
      - run:
          name:  Download cc-test-reporter
          command: |
            mkdir -p tmp/
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./tmp/cc-test-reporter
            chmod +x ./tmp/cc-test-reporter
      - run:
          name: create test report output folder
          command: "mkdir -p test-reports"
      - run:
          name: run test
          command: "yarn run test:circleci"
      - store_test_results:
          path: test-reports
      - store_artifacts:
          path: test-reports
      - run:
          name: run coverage
          command: |
            yarn run coverage
            ./tmp/cc-test-reporter format-coverage -t lcov -o tmp/codeclimate.json coverage/lcov.info
      - run:
          name: Upload coverage results to Code Climate
          command: |
            ./tmp/cc-test-reporter upload-coverage -i tmp/codeclimate.json
  analyse:
    docker:
      - image: circleci/node:8@sha256:cf1411f92b98954a78aae92f718030f4ba2aadd4fb09f9f0aea1d775c30937af
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: status message
          command: "echo analysing... dashboard:$CIRCLE_SHA1 ."
      - run:
          name: env
          command: env
      - restore_cache:
          key: dependency-cache-{{ checksum "yarn.lock" }}
      - run:
          name: create lint report output folder
          command: "mkdir -p reports"
      - run:
          name: npm run lint
          command: "yarn run lint --format junit --output-file ./reports/eslint-report.xml"
      - store_test_results:
          path: ./reports
      - store_artifacts:
          path: ./reports
  docker-build:
    docker:
      - image: circleci/node:8@sha256:cf1411f92b98954a78aae92f718030f4ba2aadd4fb09f9f0aea1d775c30937af
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: status message
          command: "echo building ... dashboard:$CIRCLE_SHA1 ."
      - run:
          name: env
          command: env
      - run:
          name: docker build
          command: "docker build -t dashboard:$CIRCLE_SHA1 ."
      - run:
          name: integration test of generated docker image
          command: |
            CONT_NAME=dashboard-$CIRCLE_SHA1
            docker run -d --name $CONT_NAME -p 3000:3000 dashboard:$CIRCLE_SHA1
            cont=$(docker ps -ql)
            sleep 5
            #
            # docker-compose will start 2 containers, the one with service will be named `contacts`
            # we start another container with curl in the same network as `contacts`, this way we have
            # all exposed ports from `contacts` available on `localhost` in this new container
            docker run --network container:$CONT_NAME \
              appropriate/curl --retry 10 --retry-delay 1 --retry-connrefused http://localhost:3000/
            #&& RESULT=$?
            docker logs $cont
            exit $RESULT
